Standard communication protocol :

LOGGED_IN = false
TIMEOUT = 1800 seconds
TIMEOUT_2 = 1 second
HASH_ALGORITHM = SHA-256
INGAME = false

While not LOGGED_IN
	(0) Ignore all data except (A) (B) (C)
	(A1) Login request
	(A1R) Login request accepted [Salt = Random]
	(A2) Login form [Username, Hash [Password + "Color Madness" + Salt]]
	(A2R) Request Diffie-Hellman [P, G] || Access denied && (0) // Number of tries and delay?
	(A3) Diffie-Hellman [B] {Simultaneous_1}
	(A3R) Diffie-Hellman [A] {Simultaneous_1} && LOGGED_IN = true // Shared key is now S

	(B1) // Password/e-mail recovery, salted too

	(C1) // Registering (Add "Color Madness" to pre-hashed password before hashing and storing)
End while

While LOGGED_IN
	!TIMEOUT || LOGGED_IN = false

	!INGAME : Every 300 seconds :
	  (A1) Keep alive [Username, Hash [S + Current_Time_Minutes]]
	  (A1R) Ack || Wrong token && LOGGED_IN = false

	(B1) // Request to join/create/game

	(C1) !INGAME && Game joined [Username, Room_ID, Hash (S + Room_ID)]
	(C1R) Ack && INGAME = true

	(D1) Data [Data]
	(D1R) Ack/answer [Data] && Reset(TIMEOUT)

	INGAME :
	  Ignore all data on death/unavailability except (F) and bonus key [Client]

	  !TIMEOUT || (I)

	  (E1) Data [Room_ID, Keydown | Keyup [Key]] // Buffer + flush every x milliseconds? (x = 30)
	  (E1R) Ack [Position, speed, size, etc.] && Reset(Timeout) // Compute and sent to all players, or the other way round? [1] Local, simultaneous computing?

	  (F1R) Data [Player_moves, bonuses, etc.]
	  (F2) Ack

	  (G1) Leave game [Username, Room_ID]
	  (G1R) Ack && INGAME = false && Reset(Timeout)

	  Every 0.5 seconds :
	    (H1) Keep alive
	      (H1R) Ack && Reset(Timeout)

	  (I1R) Is alive?
	  (I2) Ack && Reset(TIMEOUT_2) || INGAME = false

	(J1) Disconnect
	(J1R) Ack && LOGGED_IN = false // Save all data
End while
